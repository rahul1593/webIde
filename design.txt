__ create one div for line numbering
__ create one div to give some space between numbering div and content divs
__ create two divs.. backend div for extras and frontend div for editing
__ make the frontend div content editable
__ backend div will not be editable but will help in syntax
__ keystore: stores all the language specific keywords and respective color id
__ colorMap: stores color code for each color id

<!--
################################################################################
Object property UI Binding

Object.defineProperty(this, 'temperature', {
    get: function() {
      console.log('get!');
      return temperature;
    },
    set: function(value) {
      temperature = value;
      archive.push({ val: temperature });
    }
  });

o.a = 1;
// is equivalent to:
Object.defineProperty(o, 'a', {
  value: 1,
  writable: true,
  configurable: true,
  enumerable: true
});

################################################################################

-->
<html>
    <head>
        <title>Test It !_!</title>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <style>
            .sfTextStyle{text-align:left;font-family:monospace, Verdana, Arial, Helvetica, sans-serif;color:black;font-size:10px;}
            
            .uc_editor{height:400px;width:100%;border:1px solid black}
            .uc_numbers{display:inline-block;text-align:right;padding-right:2px;position:relative;top:0%;min-height:99%;width:auto;float:left;min-width:20px;border:1px solid gray;overflow-x:hidden}
            .uc_gap{display:inline-block;position:relative;top:0%;min-height:99%;width:10px;float:left;min-width:10px;border:1px solid blue;}
            
            .uc_editor_area{display:block;top:0%;float:left;width:90%;min-height:99%;}  /*manage width:364px;*/
            .uc_editor_backend{display:block;position:absolute;min-width:90%;border:2px solid red;z-index:0;}
            .uc_editor_frontend{white-space:pre-wrap;display:inline-block;position:relative;height:100%;width:100%;z-index:10;}
            
            .uc_line{display:inline-block;position:relative;left:0%;height:12px;max-height:12px;width:100%;padding-left:5px;background-color:white;}
            .uc_line_pre{display:inline;left:0%;top:0%;height:100%;;width:100%}
            .uc_line_np{display:block;left:0%;height:12px;width:100%;background-color:white}
            .key{color: #aa3399;font-weight:bold;}
            .ed_cursor{position:absolute;top:1px;left:5px;height:8px;width:1px;resize:none;border:none;margin:0;outline:none;color:black;-webkit-text-fill-color:transparent;background-color:#cccccc;};
            .ed_cursor:active{}
        </style>
    </head>
    <body>
        <div class="sfTextStyle" style="height:400px;width:100%;border:1px solid black;overflow:auto">
            <div id="ed_linenumbers" class="uc_numbers"></div>
            <div id="ed_gap" class="uc_gap"></div>
            <div id="ed_workarea" class="uc_editor_area">
                <!--<div id="ed_backend" class="uc_editor_backend"></div>-->
                <div id="ed_frontend" class="uc_editor_frontend"></div>
            </div>
        </div>
        <div id="console">
            
        </div>
        <script>
            var active_line_background_color = "#eeeeee";
            var line_background_color = "white";
            var cursor = document.createElement('input');
            cursor.className = 'ed_cursor';
            var ed_wksp = document.getElementById('ed_workarea');
            var edfe = document.getElementById('ed_frontend');
            var edbe = document.getElementById('ed_backend');
            var nbpn = document.getElementById('ed_linenumbers');
            var gppn = document.getElementById('ed_gap');
            
            var line_numbers = [];
            var line_gaps = [];
            
            var active_line = null;
            //cursor maintainance
            var lpad = 5;
            var font_size = 10;
            var font_width = 0; //to be calculated in init or aftere every font change, not required now, will include later for performance gain
            var cursor_x = lpad;
            
            //text selection
            var txt_selection = null;           
            
            // mouse event
            var no_click = false;
            function regular_click(e){
                if(no_click){
                    return;
                }
                cursor.focus();
            }
            
            function on_click(e, line){//this event should be called from pr-ps z tags of any line
                var evt = event || windows.event || e;
                evt.preventDefault();
                set_line_active(line);
                //position cursor
                var cx = evt.pageX - line.getBoundingClientRect().left - lpad;
                var tln = active_line.pre.innerHTML.toString().length;
                var fw = active_line.pre.getBoundingClientRect().width/tln;
                var pos = parseInt(cx/fw, 10)+1;
                active_line.pos = pos;
                setCursorPosition();
            }
            
            //select event
            function check_select(e){
                var evt = event || window.event || e;
                no_click = false;
                cursor.focus();
            }
            
            function on_select(e){
                var evt = event || window.event || e;
                evt.preventDefault();
                var txt='';
                txt_selection = window.getSelection();
                
                txt = txt_selection.toString();
                cursor.blur();
                if(txt.length === 0){
                    no_click = false;
                }else{
                    no_click = true;
                }console.log('selecting');
            }
            
            // line mods
            function set_line_active(line){
                if(active_line !== null){
                    active_line.style.backgroundColor = line_background_color;
                    active_line.removeChild(cursor);
                }
                line.style.backgroundColor = active_line_background_color;
                active_line = line;
                active_line.appendChild(cursor);
            }
            
            function add_line(nextNode){//create and add line to frontend, set that line active, set cursor position
                var line = document.createElement('z');
                line.className = 'uc_line';
                line.onclick = function(e){on_click(e, line);};
                var pre = document.createElement('pre');
                pre.className='uc_line_pre';
                line.appendChild(pre);
                if(nextNode === null){
                    edfe.appendChild(line);
                }else{
                    edfe.insertBefore(line, nextNode);
                }
                //add line number
                var nLine = document.createElement('z');
                nLine.className = 'uc_line_np';
                line_numbers[line_numbers.length] = nLine;
                nLine.innerHTML = line_numbers.length;
                nbpn.appendChild(nLine);
                
                line.prev = null;
                line.next = null;
                line.pos = 0;       //cursor position in chars
                line.pre = pre;
                //add line gap field
                var gLine = document.createElement('z');
                gLine.className = 'uc_line_np';
                line_gaps[line_gaps.length] = gLine;
                gppn.appendChild(gLine);
                //set this line active
                set_line_active(line);
                return line;
            }
            function delete_line(line){ //only deletes a line, will NOT set any line active
                if(line.prev !== null){
                    line.prev.next = line.next;
                    line.next.prev = line.prev;
                    edfe.removeChild(line);
                    nbpn.removeChild(line_numbers.pop());
                }
            }
            function insert_line_after(line){
                var new_line = add_line(line.next);
                new_line.prev = line;
                new_line.next = line.next;
                if(line.next !== null){
                    line.next.prev = new_line;
                }
                line.next = new_line;
                return new_line;
            }
            
            function setCursorPosition(){
                //modify the contents of pr and ps according to position in active_line
                var pos = active_line.pos;
                var text = active_line.pre.innerHTML;
                if(pos > text.length){
                    pos = text.length;  //to compensate for pre_text
                }
                if(pos<0){
                    return;
                }
                cursor_x = lpad +(pos*font_size*0.6);
                cursor.style.left = cursor_x+'px';
            }
            
            // key board character input actions
            function on_delete_key(){
                var str = active_line.pre.innerHTML;
                if(active_line.pos < str.length){
                    active_line.pre.innerHTML = str.substr(0,active_line.pos)+str.substr(active_line.pos+1);
                }else{
                    if(active_line.next !== null){
                        var ps_text = active_line.next.pre.innerHTML;
                        active_line.pre.innerHTML = str+ps_text;
                        delete_line(active_line.next);
                    }
                }
                setCursorPosition();
            }
            function on_backspace_key(){
                var str = active_line.pre.innerHTML;
                if(active_line.pos > 0){
                    active_line.pre.innerHTML = str.substr(0,active_line.pos-1)+str.substr(active_line.pos+1);
                    active_line.pos--;
                }else{
                    if(active_line.prev !== null){
                        var new_active_line = active_line.prev;
                        var text = active_line.prev.pre.innerHTML;
                        active_line.pos = text.length;
                        text += active_line.pre.innerHTML;
                        delete_line(active_line);
                        set_line_active(new_active_line);
                        active_line.pre.innerHTML = text;
                    }
                }
                setCursorPosition();
            }
            function on_tab_key(){
                active_line.pre.innerHTML += '    ';
                active_line.pos+=4;
                setCursorPosition();
            }
            function on_enter_key(){
                var ps_text = active_line.pre.innerHTML;
                active_line.pre.innerHTML = ps_text.substr(0, active_line.pos);
                ps_text = ps_text.substr(active_line.pos);
                insert_line_after(active_line); //active line changes to newly created line after this
                active_line.pre.innerHTML = ps_text;
                active_line.pos = 0;
                setCursorPosition();
            }
            
            //arrow key actions
            function on_arrow_up(){
                var pos = active_line.pos;
                if(active_line.prev !== null){
                    set_line_active(active_line.prev);
                    active_line.pos = pos;
                    setCursorPosition();
                    if(!shift_down){
                        cursor.focus();
                    }
                }
            }
            function on_arrow_down(){
                var pos = active_line.pos;
                if(active_line.next !== null){
                    set_line_active(active_line.next);
                    active_line.pos = pos;
                    setCursorPosition();
                    if(!shift_down){
                        cursor.focus();
                    }
                }
            }
            function on_arrow_left(){
                if(shift_down){
                    alert(txt_selection.text);
                }
                if(active_line.pos === 0){
                    if(active_line.prev !== null){
                        set_line_active(active_line.prev);
                        active_line.pos = active_line.pre.innerHTML.toString().length;
                        setCursorPosition();
                    }
                }else{
                    active_line.pos--;
                    setCursorPosition();
                }
            }
            function on_arrow_right(){
                if(active_line.pre.innerHTML.length === active_line.pos){
                    if(active_line.next !== null){
                        set_line_active(active_line.next);
                        active_line.pos = 0;
                        setCursorPosition();
                    }
                }else{
                    active_line.pos++;
                    setCursorPosition();
                }
            }
            
            //generic keyboard keypress event
            function on_key_press(e){
                var evt = e || window.event || event;
                evt.preventDefault();
                var c = evt.which || evt.keyCode;
                if(c===13){
                    on_enter_key();
                    cursor.focus();
                    return;
                }
                var txt = active_line.pre.innerHTML;
                active_line.pre.innerHTML = txt.substr(0, active_line.pos)+String.fromCharCode(c)+txt.substr(active_line.pos);
                active_line.pos++;
                setCursorPosition();
                cursor.focus();
            }
            
            var shift_down = false;
            var control_down = false;
            var alt_down = false;
            function on_key_down(e){
                var evt = e || window.event || event;
                var c = evt.which || evt.keyCode;
                
                if(!shift_down){
                    cursor.focus();
                }
                switch(c){
                    case  9: on_tab_key();
                        evt.preventDefault();
                        cursor.focus();
                        break;
                    case 27: cursor.blur();
                        break;
                    case  8: on_backspace_key();
                        cursor.focus();
                        break;
                    case 46: on_delete_key();
                        cursor.focus();
                        break;
                    //arrow keys
                    case 37: on_arrow_left();
                        break;
                    case 38: on_arrow_up();
                        break;
                    case 39: on_arrow_right();
                        break;
                    case 40: on_arrow_down();
                        break;
                    // special events
                    case 16: shift_down = true;console.log('Shift Down');
                        txt_selection.removeAllRanges();
                        txt_selection.addRange();
                        var rng = txt_selection.getRangeAt(0);
                        rng.setStart(active_line.pre, active_line.pre.innerHTML.length);
                        rng.setEnd(active_line.pre, 0);
                        break;
                    case 17: control_down = true;
                        break;
                    case 18: alt_down = true;
                        break;
                }
                
            }
            
            function on_key_up(e){
                var evt = e || window.event || event;
                var c = evt.which || evt.keyCode;
                switch(c){
                    case 16: shift_down = false;
                        //console.log(window.getSelection().toString());
                        evt.preventDefault();
                        console.log('Shift Up');
                        break;
                    case 17: control_down = false;
                        break;
                    case 18: alt_down = false;
                        break;
                }
            }
            
            //clipboard events
            function on_copy(){
                
            }
            function on_cut(){
                
            }
            function on_paste(){
                
            }
            
            function on_clipboard_event(event){
                
            }
            
            //initialize the editor
            function editor_init(){
                add_line(null);
                edfe.addEventListener('keypress', on_key_press, false);
                edfe.addEventListener('keydown', on_key_down, false);
                edfe.addEventListener('click', regular_click, false);
                ed_wksp.addEventListener('click', regular_click, false);
                edfe.onmousedown = function(e){check_select(e);};
                edfe.onmouseup = function(e){on_select(e);};
                
                window.addEventListener('keydown', function(){
                    if(!shift_down){
                        cursor.focus();
                    }
                }, false);
                window.addEventListener('keyup', on_key_up, false);
                
                cursor.focus();
            }
            editor_init();
        </script>
    </body>
</html>
